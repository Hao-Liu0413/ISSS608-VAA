[
  {
    "objectID": "Take_Home_Exercise/Take_Home_Exercise01/Take_Home_Exercise01.html",
    "href": "Take_Home_Exercise/Take_Home_Exercise01/Take_Home_Exercise01.html",
    "title": "Take_Home_Exercise01",
    "section": "",
    "text": "This first take-home project aims to provide a detailed visualization of Singapore’s demographic structure in 2024. Three visual representations will be described and implemented in this project:\n\nA population pyramid shows age-sex bulges, gaps, and the median age.\nA bar-chart comparison tries to compare population distribution between young and old groups.\nA bubble scatter which maps youth vs. elderly shares, with bubble size for population and color for median age.\n\nBefore we go deeper into analysis, a simple map can give us a great overview of population density of Singapore, the lighter color indicates a lower population density, which is mainly concentrated in the West and central region, while the darker color marks zones with a higher density, which are mainly in the East Region and central part of the country. Through this project we aim to provide answer for the reason of this density distribution, to undertand why and what is such difference.\n\n\n\n\n\n\n\nNote\n\n\n\nSource: Spatial super-spreaders and super-susceptibles in human movement networks - Scientific Figure on ResearchGate. Available from: https://www.researchgate.net/figure/The-subzone-residential-population-density-map-of-Singapore-PD-stands-for-population_fig1_346481200 [accessed 1 May 2025]\n\n\n\n\nA local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\nThe goal is to transfer useful demographic information to the audience by providing some visual graphics that answer questions such as:\n\n“Where do the youngest and oldest residents live?”\n“How balanced is country’s working-age population?”\n“Are Singaporean birthrates falling?”\n\n…\nBy setting these hypothetical question, we are not only providing a data visualization project, but also aiming to meet some real business needs and contribute to possible Startup companies creation.\n\n\n\nThe dataset is Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024, which is from the Department of Statistics (DOS). In total, after expanding 55 planning areas and roughly 323 subzones, across 92 age bins (Under 1, 1–89, and “90 and over”), and two sexes, the raw file runs to about 32 000 rows. Here is a summary of data structure:\n\n\n\n\n\n\n\n\n\nColumn\nType\nDescription\nExample\n\n\n\n\nPlanning Area\nText\nOne of the 55 official planning areas designated by URA.\nCentral Area\n\n\nSubzone\nText\nA finer subdivision within each planning area\nChinatown\n\n\nAge\nText\nSingle-year age categories plus special labels for youngest (“Under 1”) and oldest (“65 and over”, “90 and over”).\nUnder 1; 27; 65 and over\n\n\nSex\nText\nResident gender\nFemale\n\n\nPopulation\nText→Numeric\nResident count for June 2024. Imported as text (formatting) then cast to numeric for analysis.\n“10356” → 10356"
  },
  {
    "objectID": "Take_Home_Exercise/Take_Home_Exercise01/Take_Home_Exercise01.html#overview",
    "href": "Take_Home_Exercise/Take_Home_Exercise01/Take_Home_Exercise01.html#overview",
    "title": "Take_Home_Exercise01",
    "section": "",
    "text": "This first take-home project aims to provide a detailed visualization of Singapore’s demographic structure in 2024. Three visual representations will be described and implemented in this project:\n\nA population pyramid shows age-sex bulges, gaps, and the median age.\nA bar-chart comparison tries to compare population distribution between young and old groups.\nA bubble scatter which maps youth vs. elderly shares, with bubble size for population and color for median age.\n\nBefore we go deeper into analysis, a simple map can give us a great overview of population density of Singapore, the lighter color indicates a lower population density, which is mainly concentrated in the West and central region, while the darker color marks zones with a higher density, which are mainly in the East Region and central part of the country. Through this project we aim to provide answer for the reason of this density distribution, to undertand why and what is such difference.\n\n\n\n\n\n\n\nNote\n\n\n\nSource: Spatial super-spreaders and super-susceptibles in human movement networks - Scientific Figure on ResearchGate. Available from: https://www.researchgate.net/figure/The-subzone-residential-population-density-map-of-Singapore-PD-stands-for-population_fig1_346481200 [accessed 1 May 2025]\n\n\n\n\nA local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\nThe goal is to transfer useful demographic information to the audience by providing some visual graphics that answer questions such as:\n\n“Where do the youngest and oldest residents live?”\n“How balanced is country’s working-age population?”\n“Are Singaporean birthrates falling?”\n\n…\nBy setting these hypothetical question, we are not only providing a data visualization project, but also aiming to meet some real business needs and contribute to possible Startup companies creation.\n\n\n\nThe dataset is Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024, which is from the Department of Statistics (DOS). In total, after expanding 55 planning areas and roughly 323 subzones, across 92 age bins (Under 1, 1–89, and “90 and over”), and two sexes, the raw file runs to about 32 000 rows. Here is a summary of data structure:\n\n\n\n\n\n\n\n\n\nColumn\nType\nDescription\nExample\n\n\n\n\nPlanning Area\nText\nOne of the 55 official planning areas designated by URA.\nCentral Area\n\n\nSubzone\nText\nA finer subdivision within each planning area\nChinatown\n\n\nAge\nText\nSingle-year age categories plus special labels for youngest (“Under 1”) and oldest (“65 and over”, “90 and over”).\nUnder 1; 27; 65 and over\n\n\nSex\nText\nResident gender\nFemale\n\n\nPopulation\nText→Numeric\nResident count for June 2024. Imported as text (formatting) then cast to numeric for analysis.\n“10356” → 10356"
  },
  {
    "objectID": "Take_Home_Exercise/Take_Home_Exercise01/Take_Home_Exercise01.html#data-structure",
    "href": "Take_Home_Exercise/Take_Home_Exercise01/Take_Home_Exercise01.html#data-structure",
    "title": "Take_Home_Exercise01",
    "section": "2. Data structure",
    "text": "2. Data structure\nThe Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset, shared by Department of Statistics, Singapore (DOS), is composed by 5 main columns:\n\nPlanning Area: Geographic planning areas in Singapore.\nSubzone: Subdivision within each Planning Area.\nAge: Individual ages of residents.\nSex: Gender of residents (Male, Female).\n2024: Resident population count as of June 2024."
  },
  {
    "objectID": "Take_Home_Exercise/Take_Home_Exercise01/Take_Home_Exercise01.html#data-cleaning",
    "href": "Take_Home_Exercise/Take_Home_Exercise01/Take_Home_Exercise01.html#data-cleaning",
    "title": "Take_Home_Exercise01",
    "section": "2. Data cleaning",
    "text": "2. Data cleaning\n\n2.1 Load the necessary packages\nBefore starting the analysis, we install and load a set of R packages that help our data‐wrangling, text-parsing, and visualization toolkit:\n\n\n\n\n\n\n\nPackage\nDescription\n\n\n\n\nmatrixStats\nProvides optimized, vectorized functions for row‐ and column‐wise summaries on matrices.\n\n\nreadxl\nUsed to import Excel files (.xls and .xlsx) into R data frames without requiring Java or external dependencies.\n\n\ndplyr\nA grammar of data manipulation.\n\n\nstringr\nA consistent wrapper around R’s string‐processing functions, built on the {stringi} engine.\n\n\nreadr\nProvides functions for reading flat files (CSV, TSV, FWf).\n\n\nggplot2\nImplements the “Grammar of Graphics” for creating complex, multi‐layered visualizations.\n\n\nggrepel\nAn add‐on to ggplot2 that smartly repels text and label annotations so they do not overlap.\n\n\nscales\nProvides a suite of functions for transforming and formatting axis breaks, labels, and legends.\n\n\npatchwork\nUsed for assembling multiple ggplot2 plots into complex layouts without resorting to low‐level grid hacks.\n\n\n\n\nlibrary(matrixStats)\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(scales)\nlibrary(patchwork)\n\n\n\n2.2 Data cleaning\nThe data is loaded into environment by eliminating those rows with values “Total” for the reason that it could construct a distortion of data analysis at individual-area or individual-age level. The imported data (column: ‘Population’) has been converted into numeric format that ensures the future algebraic calculation (sum, average, or counts).\nMany values of column ‘Age’ has been transformed:\n\n“Under x” entries (e.g. “Under 1”) become age 0.\n“Over x” or “x and over” (e.g. “65 and over”) are parsed to the base number (65).\n\nAny rows where the population or parsed age turned into null values are removed. This guards against stray text labels or malformed entries that slipped past the earlier filters.\n\n# 1. Read in data and drop all “Total” summary rows\ndf_clean &lt;- read_excel(\"respopagesex2024e.xlsx\") %&gt;%\n  filter(\n    `Planning Area` != \"Total\",\n    Subzone         != \"Total\",\n    Sex             != \"Total\"\n  ) %&gt;%\n  \n  # 2. Convert population to numeric\n  mutate(\n    Population = as.numeric(`2024`),\n    \n    # 3. Parse Age into a single-year numeric\n    Age_numeric = case_when(\n      str_detect(Age, regex(\"under\",    ignore_case = TRUE)) ~ 0,\n      str_detect(Age, regex(\"over|and over\", ignore_case = TRUE)) ~ parse_number(Age),\n      TRUE ~ as.numeric(Age)\n    )\n  ) %&gt;%\n  \n  # 4. Remove any rows that failed conversion\n  filter(\n    !is.na(Population),\n    !is.na(Age_numeric)\n  )\n\nAfter the data cleaning process, we display some rows to check:\n\n# 5. Inspect\nglimpse(df_clean)\n\nRows: 37,243\nColumns: 7\n$ `Planning Area` &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\"~\n$ Subzone         &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"A~\n$ Age             &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\",~\n$ Sex             &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Fema~\n$ `2024`          &lt;chr&gt; \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"10\", \"30\", ~\n$ Population      &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30~\n$ Age_numeric     &lt;dbl&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, ~\n\nhead(df_clean, 10)\n\n# A tibble: 10 x 7\n   `Planning Area` Subzone             Age   Sex   `2024` Population Age_numeric\n   &lt;chr&gt;           &lt;chr&gt;               &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Ang Mo Kio      Ang Mo Kio Town Ce~ 0     Males 10             10           0\n 2 Ang Mo Kio      Ang Mo Kio Town Ce~ 0     Fema~ 10             10           0\n 3 Ang Mo Kio      Ang Mo Kio Town Ce~ 1     Males 10             10           1\n 4 Ang Mo Kio      Ang Mo Kio Town Ce~ 1     Fema~ 10             10           1\n 5 Ang Mo Kio      Ang Mo Kio Town Ce~ 2     Males 10             10           2\n 6 Ang Mo Kio      Ang Mo Kio Town Ce~ 2     Fema~ 10             10           2\n 7 Ang Mo Kio      Ang Mo Kio Town Ce~ 3     Males 10             10           3\n 8 Ang Mo Kio      Ang Mo Kio Town Ce~ 3     Fema~ 10             10           3\n 9 Ang Mo Kio      Ang Mo Kio Town Ce~ 4     Males 30             30           4\n10 Ang Mo Kio      Ang Mo Kio Town Ce~ 4     Fema~ 10             10           4"
  },
  {
    "objectID": "Take_Home_Exercise/Take_Home_Exercise01/Take_Home_Exercise01.html#objective-and-research-question-definition",
    "href": "Take_Home_Exercise/Take_Home_Exercise01/Take_Home_Exercise01.html#objective-and-research-question-definition",
    "title": "Take_Home_Exercise01",
    "section": "3 Objective and research question definition",
    "text": "3 Objective and research question definition\nOne of the purpose of data visualization project is to answer specific research question, here we are proposing many possible research question that could be useful in term of demographic analysis of Singapore population.\n\n3.1 National Age–Sex Structure for 2024\nThe gender is the key attribute in most of demographic analysis, by focusing on this element, we are trying to formulate the following research questions:\n\nWhat is the male and female age distribution in 2024?\nWhich male and/or female age groups show unusual trends and what is possible reason of that?\nAre there gender-specific patterns?\n\nAnalytical Approach:\n\nAggregate cleaned dataset by Age_numeric and Gender to compute total residents.\nTransform these into within-sex percentage shares.\nIdentify Extremes: compute weighted median age; select top 3 bulge cohorts and flag tiny cohorts whose share &lt; 1%.\nVisualize with ggplot2: geom_col() for the back-to-back bars; geom_vline() + annotate() for median age; geom_segment() + geom_text() arrows for bulges; geom_point() + labels for gaps; coord_flip(), absolute y-axis labels, and a clean theme.\n\n\n\n3.2 Comparing Youth vs. Elderly Shares\nConcentrating on different age groups, we can try to compare the youngest and oldest age groups in different zone of country, which can be quite useful for social impact analysis and provide advice for future policy making.\n\nWhich planning areas have the highest share of residents under age 15?\nWhich planning areas have the highest share of residents over age 65?\n\nAnalytical Approach:\n\nCompute Shares for each Planning Area.\nyouth_share = sum(Population[Age_numeric &lt; 15]) / sum(Population)\nelderly_share = sum(Population[Age_numeric &gt;= 65]) / sum(Population)\nSelect Top 10 of each metric via slice_max(n=10).\nPlot horizontally with geom_col(), green bars for under-15, red bars for 65+; format axes with scales::percent_format().\nLayout side-by-side via patchwork for direct comparison.\n\n\n\n3.3 Spatial Patterns: Median Age & Population Density\nA more complex analysis can be done by combining population age and density, here we are trying to answer these questions:\n\nHow do youth and elderly shares co-vary across all 55 planning areas?\nAre “youth hubs” (high under-15 & high density) distinct from “retirement clusters” (high 65+ & low density)?\nWhat role does median age play in these groupings?\n\nAnalytical Approach:\n\nCompute Metrics for each Planning Area: youth_share, elderly_share, total_pop = sum(Population), median_age = weightedMedian(Age_numeric, Population)\nGlobal Benchmarks: calculate means and Pearson r.\nPlot with ggplot2: aes(x = youth_share, y = elderly_share, size = total_pop, color = median_age); geom_point() + geom_smooth(method=“lm”, linetype=“dotted”); geom_vline()/geom_hline() at mean shares; ggrepel::geom_text_repel() to label areas; Color scale (viridis_c()), percent axes, and a minimal theme.\n\n\n\n3.4 Visualization Deliverables\n\n\n\n\n\n\n\n\n\ndeliverable\nResearch Question(s)\nPlot Type\nKey Features\n\n\n\n\n1. Population Pyramid\n3.1 What does Singapore’s age–sex profile look like in 2024? Which cohorts are bulges (&lt;1%) or gaps?\nBack-to-back bar chart (geom_col)\nMales left/females right; weighted median line; arrows + labels for top 3 cohorts; points for &lt;1 % ages\n\n\n2. Top-10 Youth vs. Elderly Bar Charts\n3.2 Which planning areas have the highest share under 15? Which have the highest share 65 +?\nHorizontal bar charts (geom_col)\nGreen bars for under 15; red bars for 65 +; top 10 lists; percent-formatted x-axis; patchwork layout\n\n\n3. Youth-Elderly Bubble Scatter\n3.3 How do youth and elderly shares co-vary across all planning areas? What role does median age play?\nScatter plot with bubbles (geom_point)\nx = share &lt; 15; y = share ≥ 65; bubble size = total pop; color = median age; regression line + labels"
  },
  {
    "objectID": "Take_Home_Exercise/Take_Home_Exercise01/Take_Home_Exercise01.html#visualization-elaboration-pratical-implementation",
    "href": "Take_Home_Exercise/Take_Home_Exercise01/Take_Home_Exercise01.html#visualization-elaboration-pratical-implementation",
    "title": "Take_Home_Exercise01",
    "section": "Visualization elaboration (pratical implementation)",
    "text": "Visualization elaboration (pratical implementation)\n\nmeasures definition\nWe will compute the following key metrics:\n\nAge_numeric: single-year age parsed from Age (e.g. “65 and over” → 65)\nPopulation: numeric population count from the 2024 column\nYouth population: sum of Population for Age_numeric &lt; 15\nWorking-age population: sum for 15 &lt;= Age_numeric &lt;= 64\nElderly population: sum for Age_numeric &gt;= 65\nDependency ratio: (Youth + Elderly) / WorkingAge\nSex ratio: Males / Females per age or geography\nMedian Age: median of Age_numeric, weighted by Population\n\n\n\nvisualization 1\n\n# 1. Build pyramid_df explicitly\npyramid_df &lt;- df_clean %&gt;%\n  group_by(Sex, Age_numeric) %&gt;%\n  summarise(\n    Pop = sum(Population, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(\n    # make male values negative for the left side of the pyramid\n    PopSigned = if_else(Sex == \"Male\", -Pop, Pop),\n    PopAbs    = abs(PopSigned)\n  )\n\n# 2. Compute summary stats\nmed_age &lt;- weightedMedian(df_clean$Age_numeric, w = df_clean$Population)\nbulge &lt;- pyramid_df %&gt;%\n  group_by(Age_numeric) %&gt;%\n  summarise(Tot = sum(PopAbs), .groups=\"drop\") %&gt;%\n  slice_max(Tot, n=1)\nbulge_age  &lt;- bulge$Age_numeric\nbulge_size &lt;- bulge$Tot\n\n# 3. Plot\nggplot(pyramid_df, aes(x = Age_numeric, y = PopSigned, fill = Sex)) +\n  geom_col(width = 1, color = \"white\") +\n  \n  # Median‐age line\n  geom_vline(xintercept = med_age, linetype = \"dashed\", color = \"grey40\") +\n  annotate(\"text\",\n           x     = med_age + 2,\n           y     = 0,\n           label = paste0(\"Median age: \", med_age),\n           angle = 90,\n           vjust = -0.5,\n           size  = 3) +\n  \n  # Bulge annotation\n  geom_segment(aes(x = bulge_age, xend = bulge_age,\n                   y = 0, yend = -bulge_size/2),\n               arrow = arrow(length = unit(0.2, \"cm\")),\n               colour = \"darkred\") +\n  annotate(\"text\",\n           x     = bulge_age + 3,\n           y     = -bulge_size/2,\n           label = paste0(\"Peak cohort:\\nAge \", bulge_age),\n           hjust = 0,\n           size  = 3,\n           colour= \"darkred\") +\n  \n  # Color and scales\n  scale_fill_brewer(palette = \"Set2\") +\n  scale_y_continuous(labels = abs) +\n  coord_flip() +\n  labs(\n    title    = \"Enhanced Singapore Population Pyramid (2024)\",\n    subtitle = \"Median age & largest cohort annotated\",\n    x        = \"Age (years)\",\n    y        = \"Population\",\n    fill     = NULL\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(legend.position = \"top\")\n\n\n\n\n\n\n\n\n\n\nvisualization 2\n\n# 1. Compute shares by Planning Area\ndep_pa &lt;- df_clean %&gt;%\n  group_by(`Planning Area`) %&gt;%\n  summarise(\n    youth_share   = sum(Population[Age_numeric &lt; 15], na.rm=TRUE) / sum(Population),\n    elderly_share = sum(Population[Age_numeric &gt;= 65], na.rm=TRUE) / sum(Population),\n    .groups = \"drop\"\n  )\n\n# 2a. Top 10 youngest areas (highest youth_share)\np_young_pa &lt;- dep_pa %&gt;%\n  slice_max(youth_share, n = 10) %&gt;%\n  mutate(`Planning Area` = reorder(`Planning Area`, youth_share)) %&gt;%\n  ggplot(aes(y = `Planning Area`, x = youth_share)) +\n    geom_col(fill = \"#2ca25f\") +\n    scale_x_continuous(labels = percent_format(1)) +\n    labs(\n      title = \"Top 10 Youngest Planning Areas\",\n      x     = \"Share under 15\",\n      y     = NULL\n    ) +\n    theme_minimal(base_size = 11)\n\n# 2b. Top 10 oldest areas (highest elderly_share)\np_old_pa &lt;- dep_pa %&gt;%\n  slice_max(elderly_share, n = 10) %&gt;%\n  mutate(`Planning Area` = reorder(`Planning Area`, elderly_share)) %&gt;%\n  ggplot(aes(y = `Planning Area`, x = elderly_share)) +\n    geom_col(fill = \"#de2d26\") +\n    scale_x_continuous(labels = percent_format(1)) +\n    labs(\n      title = \"Top 10 Oldest Planning Areas\",\n      x     = \"Share 65 and over\",\n      y     = NULL\n    ) +\n    theme_minimal(base_size = 11)\n\n# 3. Display side by side\np_young_pa + p_old_pa\n\n\n\n\n\n\n\n\n\n\nvisualization 3\n\n# 1. Compute metrics\ndep_shares &lt;- df_clean %&gt;%\n  group_by(`Planning Area`) %&gt;%\n  summarise(\n    youth_share   = sum(Population[Age_numeric &lt; 15], na.rm=TRUE) / sum(Population),\n    elderly_share = sum(Population[Age_numeric &gt;= 65], na.rm=TRUE) / sum(Population),\n    total_pop     = sum(Population),\n    median_age    = matrixStats::weightedMedian(Age_numeric, w = Population),\n    .groups       = \"drop\"\n  )\n\n# 2. National means & correlation\nmean_youth   &lt;- mean(dep_shares$youth_share)\nmean_elderly &lt;- mean(dep_shares$elderly_share)\ncorr_val     &lt;- cor(dep_shares$youth_share, dep_shares$elderly_share)\n\n# 3. Plot\nggplot(dep_shares, aes(\n    x = youth_share,\n    y = elderly_share,\n    size  = total_pop,\n    color = median_age\n  )) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"grey40\", linetype = \"dotted\") +\n  geom_vline(xintercept = mean_youth,   linetype = \"dashed\", color = \"grey60\") +\n  geom_hline(yintercept = mean_elderly, linetype = \"dashed\", color = \"grey60\") +\n  geom_point(alpha = 0.8) +\n  geom_text_repel(\n    aes(label = `Planning Area`),\n    size       = 3,\n    max.overlaps = 20\n  ) +\n  scale_x_continuous(labels = percent_format(1)) +\n  scale_y_continuous(labels = percent_format(1)) +\n  scale_size(range = c(2, 10), labels = comma_format(accuracy = 1), name = \"Total pop\") +\n  scale_color_viridis_c(option = \"magma\", name = \"Median age\") +\n  annotate(\n    \"text\", \n    x    = 0.30, \n    y    = 0.20, \n    label= paste0(\"r = \", round(corr_val, 2)),\n    size = 4, \n    color= \"black\"\n  ) +\n  labs(\n    title    = \"Youth vs. Elderly Shares by Planning Area\",\n    subtitle = \"Bubble size ~ total population; Color ~ median age\",\n    x        = \"Share of residents under 15\",\n    y        = \"Share of residents 65 and over\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    legend.position = \"right\",\n    panel.grid.minor = element_blank()\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#learning-outcome",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.3 Importing Data",
    "text": "3.3 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---ggiraph-methods",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.4 Interactive Data Visualisation - ggiraph methods",
    "text": "3.4 Interactive Data Visualisation - ggiraph methods\nggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.5 Interactivity",
    "text": "3.5 Interactivity\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactivity-1",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.6 Interactivity",
    "text": "3.6 Interactivity\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.7 Interactive Data Visualisation - plotly methods!",
    "text": "3.7 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n3.7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n3.7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n\n\n\n3.7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\n\nVisit this link to learn more about crosstalk,"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.8 Interactive Data Visualisation - crosstalk methods!",
    "text": "3.8 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n3.8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n3.8.2 Linked brushing: crosstalk method\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#reference",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.9 Reference",
    "text": "3.9 Reference\n\n3.9.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\n\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3.9.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Getting started",
    "text": "Getting started\n\nInstalling and loading the required libraries\nBefore we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk on the right assumes that you already have pacman package installed. If not, please go ahead install pacman first.\n\n\n\npacman::p_load(tidyverse)\n\n\n\nImporting data\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Introducing ggplot",
    "text": "Introducing ggplot\n is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics\n\nIt is also part of the tidyverse family specially designed for visual exploration and communication.\n\n\nFor more detail, visit ggplot2 link.\n\n\nR Graphics VS ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\nAs pointed out by Hadley Wickham\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Grammar of Graphics",
    "text": "Grammar of Graphics\nBefore we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\nA Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\n\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: data",
    "text": "Essential Grammatical Elements in ggplot2: data\nLet us call the ggplot() function using the code chunk on the right.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: geom",
    "text": "Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\nGeometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBe warned\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\nModifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\nModifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\nGeometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\nGeometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\ngeom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: stat",
    "text": "Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\nWorking with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\nWorking with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\n\nWorking with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\nAdding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\n\n\n\n\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe default method used is loess.\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: Facets",
    "text": "Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\nWorking with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\nfacet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\n-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.\n-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a \"fixed\" aspect ratio (e.g. 1.78 for a \"widescreen\" plot).\n-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.\n\nWorking with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\nChanging the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: themes",
    "text": "Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\nWorking with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Reference",
    "text": "Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\nWelcome to Hao’s portfolio! This website contains all the projects I completed in the SMU course “Visual Analytics and Applications,” which was part of my Exchange experience. Don’t hesitate to contact me for any questions or doubts—thanks!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, you will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, you will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "Getting started",
    "text": "Getting started\n\nInstalling and loading the required libraries\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\nImporting data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")\n\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "Beyond ggplot2 Annotation: ggrepel",
    "text": "Beyond ggplot2 Annotation: ggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\nggrepel  is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\n\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\nWorking with ggrepel\n\nThe plotThe codePractice \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=SCIENCE)) + # changed the subject\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = GENDER),  # modified label\n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "Beyond ggplot2 Themes",
    "text": "Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nThe plotThe codePractice \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = SCIENCE)) + # try with other subject\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_void() + # modified theme\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\nRefer to this link to learn more about ggplot2 Themes\n\nWorking with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nThe plotThe codePractice \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = ENGLISH)) + # try with other subject\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist_white() # modified theme\n\n\n\n\n\n\n\n\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\n\nWorking with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe codePractice \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = SCIENCE)) + # modified subject\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum_rc() #used other theme\n\n\n\n\n\n\n\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe codePractice \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = SCIENCE)) + #modified subject\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 20, #tries with different size\n              base_size = 20,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "Beyond Single Graph",
    "text": "Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\nNext\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\nCreating Composite Graphics: pathwork methods \nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\nCombining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nThe plotThe codePractice \n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\np1 + p3 # other plots\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCombining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nThe plotThe codePractice \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n(p1 / p3) | p2 # different composition\n\n\n\n\n\n\n\n\n\n\n\n\nTo learn more about, refer to Plot Assembly.\n\n\nCreating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe plotThe codePractice \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = '1') # different tag\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe codePractice \n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\np2 + inset_element(p3, \n                   left = 0.5, \n                   bottom = 1, \n                   right = 0.02, \n                   top = 0.7) # different position\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe codePractice \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\npatchwork &lt;- (p2 / p1) | p3\npatchwork & theme_dark()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "Reference",
    "text": "Reference\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to the ISSS608 Visual Analytics and Applications homepage!\nBelow you’ll find links to each of the subsections (chapters, exercises, or projects) I’ve published:\n\nHands-on_Ex01\nHands-on_Ex02\nHands-on_Ex03\nHands-on_Ex03_part2\nTake-Home Exercise 01\n\nFeel free to click any link to jump straight to that section.\nHappy exploring!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html",
    "title": "4 Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#overview",
    "title": "4 Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#getting-started",
    "title": "4 Programming Animated Statistical Graphics with R",
    "section": "4.2 Getting Started",
    "text": "4.2 Getting Started\n\n4.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n4.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#animated-data-visualisation-gganimate-methods",
    "title": "4 Programming Animated Statistical Graphics with R",
    "section": "4.3 Animated Data Visualisation: gganimate methods",
    "text": "4.3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n4.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\n\n4.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\nThe animated bubble chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#animated-data-visualisation-plotly",
    "title": "4 Programming Animated Statistical Graphics with R",
    "section": "4.4 Animated Data Visualisation: plotly",
    "text": "4.4 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n4.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n4.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03_part2/Hands-on_Ex03_part2.html#reference",
    "title": "4 Programming Animated Statistical Graphics with R",
    "section": "4.5 Reference",
    "text": "4.5 Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Take_Home_Exercise/Take_Home_Exercise01/Take_Home_Exercise01.html#visualization-elaboration",
    "href": "Take_Home_Exercise/Take_Home_Exercise01/Take_Home_Exercise01.html#visualization-elaboration",
    "title": "Take_Home_Exercise01",
    "section": "4 Visualization elaboration",
    "text": "4 Visualization elaboration\n\n4.1 Visualization 1 (National Age–Sex Structure for 2024)\nTo create the pyramid graph, we assign the clean dataset to ‘pyramid_df’ and group the data by ‘Sex’ and ‘Age_numeric’, and for each (Sex,Age_numeric) group, we count the total resident. By using ‘mutate’ function, we are going to transform raw counts into per-sex percentages, then turns the result into signed and absolute forms for plotting and annotation.\n\n# 1. Build pyramid_df with percentage shares\npyramid_df &lt;- df_clean %&gt;%\n  group_by(Sex, Age_numeric) %&gt;%\n  summarise(Pop = sum(Population, na.rm=TRUE), .groups=\"drop\") %&gt;%\n  group_by(Sex) %&gt;%\n  mutate(\n    PopPct    = Pop / sum(Pop),\n    PopSigned = if_else(Sex==\"Male\", -PopPct, PopPct),\n    PopAbs    = abs(PopSigned)\n  ) %&gt;%\n  ungroup()\n\nWe compute also weighted median age by using function ‘weightedMedian’\n\n# 2. Compute weighted median age\nmed_age &lt;- weightedMedian(df_clean$Age_numeric, w=df_clean$Population)\n\nThe we annotate the ‘top3_cohorts’ and ‘tiny_cohorts’ which identify the the largest age groups and those with population shares under 1%\n\n# 3. Identify extremes\nage_totals &lt;- pyramid_df %&gt;%\n  group_by(Age_numeric) %&gt;%\n  summarise(Share = sum(PopPct), .groups=\"drop\")\n\ntop3_cohorts  &lt;- age_totals %&gt;% slice_max(Share, n=3)\ntiny_cohorts &lt;- age_totals %&gt;% filter(Share &lt; 0.01)\n\nThrough ggplot function, we generated the pyramide plot:\n\n# 4. Plot as percent pyramid with annotations\nggplot(pyramid_df, aes(x=Age_numeric, y=PopSigned, fill=Sex)) +\n  geom_col(width=1, color=\"white\") +\n  \n  # median‐age line\n  geom_vline(xintercept=med_age, linetype=\"dashed\", color=\"grey40\") +\n  annotate(\"text\",\n           x = med_age + 2, y = 0,\n           label = paste0(\"Median age: \", med_age),\n           angle=90, vjust=-0.5, size=3) +\n  \n  # top-3 bulges\n  geom_segment(data=top3_cohorts, inherit.aes=FALSE,\n               aes(x=Age_numeric, xend=Age_numeric,\n                   y=0, yend = - (Share) * 0.6),\n               arrow=arrow(length=unit(0.2,\"cm\")),\n               colour=\"darkred\") +\n  geom_text(data=top3_cohorts, inherit.aes=FALSE,\n            aes(x=Age_numeric+2, y= - (Share)*0.6,\n                label=paste0(\"Peak: \", Age_numeric)),\n            hjust=0, size=3, colour=\"darkred\") +\n  \n  # tiny cohorts (&lt;1%)\n  geom_point(data=tiny_cohorts, inherit.aes=FALSE,\n             aes(x=Age_numeric, y=0),\n             colour=\"blue\", size=2) +\n  geom_text(data=tiny_cohorts, inherit.aes=FALSE,\n            aes(x=Age_numeric, y=0, label=Age_numeric),\n            vjust=-1, size=2.5, colour=\"blue\") +\n  \n  # percent scales & flip\n  scale_y_continuous(labels=percent_format(accuracy=1)) +\n  coord_flip() +\n  scale_fill_brewer(palette=\"Set2\") +\n  \n  # labels & theme\n  labs(\n    title    = \"Singapore Population Pyramid (2024)\",\n    subtitle = \"Cohort % shares; median & peaks/gaps annotated\",\n    x        = \"Age (years)\",\n    y        = \"% of sex population\",\n    fill     = NULL\n  ) +\n  theme_minimal(base_size=12) +\n  theme(\n    legend.position    = \"top\",\n    panel.grid.major.y = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nPlot description:\nIn 2024, Singapore population shows a kind of “double-bulge” pattern and a overall shift toward an older age group. The median age is 42 and top 3 largest age groups are around 33,35, and 36, while small blue dots identifies groups under 1% of their sex.\nSex differences are also evident: although there is not huge differences between them, the female bars extend further at ages 70+, indicating a higher female longevity. Both gender distributions converge between ages 20–40, that confirms a balanced labor-force cohorts. The chart inspires Singapore’s transition to an older population (as happen in Japan), with age groups “bulges” at 35 and 55, and flags a shrinking base of young children.\n\n\n\n\n4.2 Visualization 2 (Age Distributions by Planning Area)\nAs mentioned in the analytical approch (3.2 Comparing Youth vs. Elderly Shares), in this pahse, we compute the ‘youth_share’ and ‘elederly_share’ by using these formulas:\nyouth_share = sum(Population[Age_numeric &lt; 15]) / sum(Population)\nelderly_share = sum(Population[Age_numeric &gt;= 65]) / sum(Population)\n\n# 1. Compute shares by Planning Area\ndep_pa &lt;- df_clean %&gt;%\n  group_by(`Planning Area`) %&gt;%\n  summarise(\n    youth_share   = sum(Population[Age_numeric &lt; 15], na.rm=TRUE) / sum(Population),\n    elderly_share = sum(Population[Age_numeric &gt;= 65], na.rm=TRUE) / sum(Population),\n    .groups = \"drop\"\n  )\n\nThe we display plots for each share group, and put them together:\n\n# 2a. Top 10 youngest areas (highest youth_share)\np_young_pa &lt;- dep_pa %&gt;%\n  slice_max(youth_share, n = 10) %&gt;%\n  mutate(`Planning Area` = reorder(`Planning Area`, youth_share)) %&gt;%\n  ggplot(aes(y = `Planning Area`, x = youth_share)) +\n    geom_col(fill = \"#2ca25f\") +\n    scale_x_continuous(labels = percent_format(1)) +\n    labs(\n      title = \"Top 10 Youngest Planning Areas\",\n      x     = \"Share under 15\",\n      y     = NULL\n    ) +\n    theme_minimal(base_size = 11)\n\n# 2b. Top 10 oldest areas (highest elderly_share)\np_old_pa &lt;- dep_pa %&gt;%\n  slice_max(elderly_share, n = 10) %&gt;%\n  mutate(`Planning Area` = reorder(`Planning Area`, elderly_share)) %&gt;%\n  ggplot(aes(y = `Planning Area`, x = elderly_share)) +\n    geom_col(fill = \"#de2d26\") +\n    scale_x_continuous(labels = percent_format(1)) +\n    labs(\n      title = \"Top 10 Oldest Planning Areas\",\n      x     = \"Share 65 and over\",\n      y     = NULL\n    ) +\n    theme_minimal(base_size = 11)\n\n# 3. Display side by side\np_young_pa + p_old_pa\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nPlot description:\nThe first plot identifies Changi and Punggol as the “youngest” area of Singapore in 2024, with over 22 % of residents under 15, followed by Singapore River. Southern Islands and Western Water Catchment show high youth shares as well, indicating small but family-oriented populations in those zones. The second plot identifies Outram as the “oldest” district at nearly 29 % of 65 + age group, followed by Ang Mo Kio and Bukit Merah. These mature, inner-city precincts have proportionally more seniors. Areas like Bedok, Queenstown, and Toa Payoh likewise appear, underscoring how Singapore’s first-generation housing towns still house an aging cohort.\nThe plot contributes to where childhood services (schools, playgrounds) might be most needed (Punggol, Changi, Tengah) and where eldercare resources (community centers, healthcare) should be prioritized (Outram, Ang Mo Kio, Bukit Merah).\n\n\n\n\n4.3 Visualization 3 (Spatial Patterns: Median Age & Population Density)\nAs done in the previous plot, we have to compute the key metrics for our visualization task by using these formulas:\nyouth_share = sum(Population[Age_numeric &lt; 15]) / sum(Population)\nelderly_share = sum(Population[Age_numeric &gt;= 65]) / sum(Population)\ntotal_pop = sum(Population)\nmedian_age = matrixStats::weightedMedian(Age_numeric, w = Population)\n\n# 1. Compute metrics\ndep_shares &lt;- df_clean %&gt;%\n  group_by(`Planning Area`) %&gt;%\n  summarise(\n    youth_share   = sum(Population[Age_numeric &lt; 15], na.rm=TRUE) / sum(Population),\n    elderly_share = sum(Population[Age_numeric &gt;= 65], na.rm=TRUE) / sum(Population),\n    total_pop     = sum(Population),\n    median_age    = matrixStats::weightedMedian(Age_numeric, w = Population),\n    .groups       = \"drop\"\n  )\n\nThe we compute the average proportion of residents under 15 and over 65 across the 55 planning areas, and the Pearson correlation between each area’s youth share and elderly share.\n\n# 2. National means & correlation\nmean_youth   &lt;- mean(dep_shares$youth_share)\nmean_elderly &lt;- mean(dep_shares$elderly_share)\ncorr_val     &lt;- cor(dep_shares$youth_share, dep_shares$elderly_share)\n\nThe final plot is the following:\n\n# 2. National means & correlation\nmean_youth   &lt;- mean(dep_shares$youth_share)\nmean_elderly &lt;- mean(dep_shares$elderly_share)\ncorr_val     &lt;- cor(dep_shares$youth_share, dep_shares$elderly_share)\n\n# 3. Plot\nggplot(dep_shares, aes(\n    x = youth_share,\n    y = elderly_share,\n    size  = total_pop,\n    color = median_age\n  )) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"grey40\", linetype = \"dotted\") +\n  geom_vline(xintercept = mean_youth,   linetype = \"dashed\", color = \"grey60\") +\n  geom_hline(yintercept = mean_elderly, linetype = \"dashed\", color = \"grey60\") +\n  geom_point(alpha = 0.8) +\n  geom_text_repel(\n    aes(label = `Planning Area`),\n    size       = 3,\n    max.overlaps = 20\n  ) +\n  scale_x_continuous(labels = percent_format(1)) +\n  scale_y_continuous(labels = percent_format(1)) +\n  scale_size(range = c(2, 10), labels = comma_format(accuracy = 1), name = \"Total pop\") +\n  scale_color_viridis_c(option = \"magma\", name = \"Median age\") +\n  annotate(\n    \"text\", \n    x    = 0.30, \n    y    = 0.20, \n    label= paste0(\"r = \", round(corr_val, 2)),\n    size = 4, \n    color= \"black\"\n  ) +\n  labs(\n    title    = \"Youth vs. Elderly Shares by Planning Area\",\n    subtitle = \"Bubble size ~ total population; Color ~ median age\",\n    x        = \"Share of residents under 15\",\n    y        = \"Share of residents 65 and over\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    legend.position = \"right\",\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nPlot description:\nOn the x-axis (‘Shares of residents under 15’), Punggol, Changi, and Southern Islands lie far right as confirmed in the visualization 2, indicating 20–30 % of residents under 15. On the y-axis (‘Share of residents 65 and over’), Outram, Rochor, and Ang Mo Kio sit near 25–30 % aged 65 +, marking them as “retirement clusters.” The vertical and horizontal dashed lines show national average shares (~13 % youth, ~17 % elderly), and the dotted regression line (r ≈ –0.07) confirms almost no linear trade-off between youth and senior population, means that changes in youth shares do not reliably predict changes in elderly shares.\nPunggol’s large dot highlights its sizable young population, while Outram has a small portion of residents but the highest percentage of “retirement clusters”. This visualization indicates true “youth hubs” and “elder hubs” at a glance, enriched by population and age-structure context.\n\n\n\n\n4.4 Conclusion\nThe pyramid plot shows that Singapore’s population reveals a clear shift toward an older population, and a higher longevity of female resident compared to male groups. By examining the planning ares data, Changi and Punggol are unmistakable “youth hubs” (as confirmed in visualization 2,3), whereas Outram, Ang Mo Kio and Bugit Merah stand out as “retirement clusters”.\nAn interesting part is shown in the visualization 3, which confirms that extreme concentrations of children and seniors seldom overlap and most districts clustering near the national average. Likewise, the correlation indicator (r = -0.07) indicates there is no significant correlation between two groups, changes in youth shares will not affect elderly population. Most of area are in the middle position rather than being an outlier of the data."
  }
]